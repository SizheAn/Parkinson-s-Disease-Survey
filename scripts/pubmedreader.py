from metapub import PubMedFetcher
from metapub import pubmedcentral as pmc
import xml.etree.ElementTree as ET
from metapub import exceptions as ex
import difflib as df
from difflib import SequenceMatcher
import sys
import json
import glob
import csv
import codecs

fetch = PubMedFetcher()

pmcids = fetch.pmids_for_query(query="parkinson[Body - Key Terms] OR parkinson[Abstract] OR parkinson[Title] ", retmax = 500000, since='2020/1/1', until='2021/12/31')

"""
pmcids = ['3999919', '3743274', '3126898', '3075093', '3030620', '3154471', '3105364', '3105349', '3090700', '3086982', '3077806', '3150632', '3142314', '3119728', '3139745', '3140626', '3080432', '3082603', '3082599',
          '3076924', '3171986', '3077063', '3076708', '3109211', '3076891', '3478782', '3081400', '3017659', '3070808', '3094491', '3134594', '3129456', '3073692', '3042054', '3073659', '3086750', '3073776', '3059359',
          '3049839', '3076524', '3065393', '3079954', '3062645', '3003756', '3013587', '3335292', '2995538', '3034779', '3076937', '3044597', '3014090', '3008651', '2902651', '3014235', '3034832', '3052741', '2995389',
          '2995381', '2989455', '2978804', '2978796', '2978783', '2978749', '3059560', '3014414', '3071582', '3014443', '2987579', '2943528', '2992436', '2964413', '3030932', '2982747', '3060560', '3005080', '3026854',
          '2963102', '3033473', '3142745', '3013482', '3044594', '3058923', '3013496', '3013493', '3049925', '3010317', '2998915', '2965031', '2948859', '3014380', '3013491', '3013490', '2975791', '2942065', '2942062',
          '3021587', '3010315', '2942031', '3402222', '3021636', '2951281', '2950658', '2938970', '2976821', '2963190', '3063061', '2928867', '2928859', '2963704', '2991511', '2918477', '2918476', '2918475', '2918473',
          '2990780', '2926660', '2918470', '2939376', '2914177', '3079309', '2955160', '2918889', '2918886', '2948971', '2942968', '2998583', '2963089', '2910157', '2904302', '2955162', '2905930', '3046107', '2930109',
          '2936815', '2930040', '2916037', '2900808', '2995012', '2946513', '2891220', '2942983', '2943649', '2940521', '3005938', '2955999', '2918373', '2910188', '2903978', '2926295', '2901929', '2882212', '2902645',
          '2902582', '2901168', '2902623', '2924670', '2880215', '2932439', '2871006', '2871002', '3061491', '3049172', '2922955', '2917467', '2888469', '2881486', '2881485', '2861071', '3068920', '2941569', '2915446',
          '2933791', '2860483', '2921461', '2865731', '2882524', '2927630', '2886181', '2883630', '2865778', '2865777', '3064519', '2947487', '2935170', '2905054', '2879080', '2871982', '2848105', '2862872', '3035622',
          '2848103', '2916058', '2895681', '2836869', '2908992', '2873031', '2839194', '3046050', '2974844', '2928063', '2886796', '2866526', '2865233', '2794987', '2911493', '2887303', '2832199', '2860012', '2849855',
          '2849921', '2836801', '2830732', '2843786', '2847049', '2858426', '2901991', '2875870', '2848288', '2831155', '2831132', '2824068', '2908247', '2872606', '2809034', '2809032', '2862351', '2795090', '2822730',
          '2809029', '2853717', '2888997', '2809026', '2854310', '3390306', '2929874', '2902006', '2844480', '2837534', '2891925', '2832285', '2814895', '2812690', '2815244', '2790224', '2900796', '2829355', '2852209',
          '2836388', '2797627', '2924754', '2885004', '2837584', '2809778', '2795011', '2787702', '2787679', '2821466', '2970621', '2788810', '2788809', '2839805', '2822354', '2788804', '2787875', '2799215', '2841445',
          '3410709', '2779008', '2779004', '2825114', '2821674', '2783428', '2773770', '2769554', '2773757', '2856322', '2775030', '2878892', '2764417', '2856083', '2829360', '2818316', '2764397', '2764396', '2764395',
          '2897716', '2755828', '2888465', '2790543', '2758866', '2754991', '2845175', '2818171', '2759961', '2813508', '2819546', '2771772', '2813334', '2784015', '2744826', '3045809', '2831417', '2813519', '2793272',
          '2768772', '2751626', '3106339', '2844122', '2755611', '2759458', '2753714', '2790547', '2888942', '2775888', '2736332', '2754604', '2736167', '2743643', '2965589', '2833268', '2725932', '2725927', '2832857',
          '2754410', '2848971', '2803115', '2726979', '2814531', '2715211', '2864783', '2765788', '2929376', '2746858', '2760640', '2715573', '2789849', '2892101', '2713188', '2839890', '2709268', '2737944', '2945234',
          '2848994', '2828902', '2794049', '2760041', '2760034', '2746681', '2746076', '2727651', '2725359', '2724761', '2722758', '2708794', '2704264', '2718927', '2709887', '3366193', '2717981', '2728557', '2864364',
          '2757072', '2698132', '2692178', '2958775', '2701947', '2695242', '2888650', '2843560', '2690967', '2820605', '2780534', '2694487', '2690565', '2688626', '2685680', '2862453', '2825375', '2723849', '2718328',
          '2742558', '2742205', '2710584', '2689114', '2689103', '2682873', '2682849', '2712268', '2889725', '2743078', '2827255', '2679485', '2679430', '2903625', '2684563', '2783244', '2676045', '2689218', '2771225',
          '2689232', '2696567', '2839410', '2763140', '2758782', '2753269', '2752967', '2692580', '2689771', '2688709', '2687017', '2680887', '2676433', '2670174', '2670173', '2670110', '2712265', '2696326', '2677508',
          '3045860', '2828948', '3045861', '2667990', '2667970', '2665075', '2758662', '2696033', '2679749', '2679853', '2666611', '2666569', '2666560', '2956407', '2863322', '2769014', '2768319', '2754154', '2737695',
          '2680500', '2667354', '2665974', '2664996', '2662575', '2662569', '2662565', '3065103', '2835184', '2824516', '2686897', '2783812', '2752687', '2735256', '2735787', '2821837', '2821036', '2658102', '2658087',
          '2667502', '2733191', '2667907', '2667996', '2652328', '2652287', '2693257', '2677475', '2963152', '2958169', '2649108', '2732569', '3073412', '2847416', '2756154', '2652347', '2650009', '2749069', '2671999',
          '2874864', '2744781', '2698947', '2648688', '2648670', '2733244', '2737707', '2647772', '2728466', '2872983', '2644690', '2706019', '2635057', '3057130', '2680787', '2646729', '2828612', '2676726', '2648679',
          '2664577', '2645037', '2637050', '2635577', '2945224', '2648796', '2648768', '2631975', '2631957', '2768412', '2677501', '2744324', '2629115', '2629092', '2637228', '2954610', '2649133', '3064843', '2692600',
          '2677494', '2642772', '2819925', '2814800', '2731655', '2688662', '2640439', '2987736', '2952420', '2911037', '2867249', '2852580', '2819373', '2804995', '2692822', '2669321', '2626653', '2612083', '2612075',
          '2718055', '2680584', '2677987', '2659542', '2613473', '2613467', '2791353', '2613935', '2662228', '2646519', '2640208', '2753200', '2745097', '2715850', '2676900', '2646656', '2646080', '2605644', '2586262',
          '2766594', '2724179', '2645918', '2607264', '2824449', '2638696', '2636714', '3049941', '2823569', '2765397', '2662190', '2627511', '2776079', '2632584', '2649739', '2579934', '2898565', '2768257', '2730893',
          '2725182', '2709177', '2682367', '2669703', '2630709', '2630251', '2615392', '2614284', '2600665', '2582207', '2582061', '2577212', '2635944', '2573070', '2689790', '2947189', '2676964', '2615251', '2593006',
          '2565709', '2579910', '2643960', '2638775', '2579319', '2676990', '2676865', '2970615', '2746037', '2710115', '2630216', '2629407', '2605102', '2572747', '2557053', '2634293', '2573876', '2939006', '2559817',
          '3045862', '2680125', '2585150', '2562387', '2556687', '2564959', '2702757', '2577013', '2632939', '2676945', '2637553', '2667619', '2563020', '2745948', '2529373', '3104935', '2729120', '2533641', '2518349',
          '2676993', '2693935', '2533001', '2683412', '2597634', '2515383', '2531076', '2937041', '2747627', '2700020', '2744580', '2633781', '2543022', '2500154', '2753686', '2745435', '2553626', '2542964', '2536536',
          '2533022', '2683421', '2553438', '2630458', '2683920', '2519104', '2492856', '2588284', '2570107', '2483290', '2515216', '2443652', '2847392', '2637808', '2585508', '2632608', '2570064', '2713878', '2668811',
          '3056438', '2745052', '2642617', '2574808', '2493378', '2459249', '2446427', '2438296', '2438280', '2716559', '2673561', '2632476', '2597083', '2685192', '2728933', '2581418', '2880173', '2579266', '2427127',
          '2989816', '2882072', '2442844', '2577158', '2701551', '2398736', '2668142', '2647149', '2590936', '2586915', '2556485', '2546470', '2527668', '2526379', '2526366', '2442420', '2442411', '2386904', '2429897',
          '2696021', '2516196', '2654275', '2843908', '2442423', '2574932', '2386916', '2391279', '2764120', '2692267', '2635712', '2386097', '2533860', '2631093', '2442309', '2577935', '2527750', '2930078', '2676777',
          '2533152', '2474726', '2398758', '2398742', '2398741', '2630539', '2583202', '2491722', '2936239', '2374789', '2386138', '2532975', '2552999', '2492890', '2736475', '2386499', '2954654', '2574855', '2670993',
          '2431022', '2431021', '2427211', '2688655', '2518382', '2364726', '2291541', '2276521', '2271166', '2335093', '2267847', '2605676', '2679986', '2666958', '2440940', '2367211', '2650101', '2547405', '2576470',
          '2562913', '3045851', '2826203', '2645549', '2268956', '2474740', '2270355', '2588230', '2632401', '2276193', '2413293', '2265686', '2468317', '2895331', '2497339', '2329801', '3390309', '2892116', '2464760',
          '2427225', '2364711', '2347378', '2157565', '2643951', '2234350', '2248204', '2206610', '2394191', '3045853', '2849981', '2847418', '2752627', '2701509', '2647750', '2607121', '2561172', '2446487', '2423384',
          '2186369']
"""

done = []
error = []
j = 0
try:
    with codecs.open('PMC_E_fulL06222022.csv', 'w', encoding = 'utf8') as csvfile:
        filewriter = csv.writer(csvfile, delimiter=',',
                            quotechar='"', quoting=csv.QUOTE_ALL)
        filewriter.writerow(['Title', 'Authors', 'Published in', 'Year','Document Type', 'Keywords', 'Abstract', 'Identifier'])
        csvfile.flush()

        for id in pmcids:
            if id == '6214811':
                print("")
            print(id)
            done.append(id)
            if len(done) >= 100:
                with open('doneList' + str(j) + '.json', 'w') as fp:
                    json.dump(done, fp)
                    done = []
                    j = j + 1
            try:
                #article = fetch.article_by_pmcid(id)
                #xml = article.xml
                xml = fetch.article_by_pmcid(id)
                #print(xml)
                root = ET.fromstring(xml)

                articleType = root[0].attrib['article-type']

                if articleType != 'research-article':
                    continue

                article = root[0]

                articleId = ""

                articleMeta = article.find('./front/article-meta')
                for aid  in articleMeta.findall('article-id'):
                    if aid.attrib['pub-id-type'] == 'doi':
                        articleId = aid.text


                for titleGrp in article.iter('title-group'):
                    for artTitle in titleGrp.iter('article-title'):
                        add = ''
                        if artTitle.text != None:
                            add += ' ' + artTitle.text
                        for elem in artTitle:
                            if elem.text != None:
                                add += ' ' + elem.text
                            if elem.tail != None:
                                add += ' ' + elem.tail
                        title = add[1:]
                keywords = []
                for kwdGroup in article.iter('kwd-group'):
                    for kwd in kwdGroup.iter('kwd'):
                        if kwd.text != None:
                            add = ''
                            if kwd.text != None and kwd.text.isprintable():
                                add += ' ' + kwd.text
                            for elem in kwd:
                                if elem.text != None and elem.text.isprintable():
                                    add += ' ' + elem.text
                            keywords.append(add[1:])
                        else:
                            for elem in kwd:
                                if elem.text != None:
                                    keywords.append(elem.text)

                publishedby = ''
                try:
                    publishedby = article.find('./front/journal-meta/journal-title-group/journal-title').text
                except:
                    publishedby = article.find('./front/journal-meta/journal-title').text

                year = article.find('./front/article-meta/pub-date/year').text
                """
                for pub_date in article.iter('pub-date'):
                    if pub_date.attrib['pub-type'] == "epub":
                        year = pub_date.find("./year").text
                
                history = article.find('./front/article-meta/history')
                for date in history.iter('date'):
                    if date.attrib['date-type'] == 'received':
                        year = date.find('./year').text
                """
                authors = ''
                contribGrp = article.find('./front/article-meta/contrib-group')
                if contribGrp == None:
                    continue
                for contrib in contribGrp.iter('contrib'):
                    if contrib.attrib['contrib-type']!="author":
                        continue
                    try:
                        name = contrib.find('./name')
                        firstname = name.find('./given-names').text
                        lastname = name.find('./surname').text
                        authors += lastname+', '+firstname+'; '
                    except AttributeError:
                        continue
                    except:
                        continue

                authors = authors[:-2]

                abstractCon = article.find('./front/article-meta/abstract')
                if abstractCon == None:
                    continue
                abstract = ''
                for p in abstractCon.iter('p'):
                    add = ''
                    if p.text != None:
                        add += ' ' + p.text
                    for elem in p:
                        if elem.text != None:
                            add += ' ' + elem.text
                        if elem.tail != None:
                            add += ' ' + elem.tail

                    if add == '':
                        add = p.text+' '
                    abstract += add
                if abstract == '':
                    print("Hey!")
                filewriter.writerow([title, authors, publishedby, year, articleType, ','.join(keywords), abstract, articleId])
                csvfile.flush()
            except ex.MetaPubError:
                print("MetaPubError error:", ex.MetaPubError)
            except:
                error.append(id)
                print("Unexpected error:", sys.exc_info()[0])
except:
    print("Unexpected error2:", sys.exc_info()[0])



print(error)



#print(C)

"""
query = xploreapi.XPLORE('uaqee93t5j6ewkkgekyu4jz3')
query.booleanText('smartphone AND parkinsons')
#query.articleTitle('(smartphone sensor sensors accelerometer emg eeg meg ecg force imu recording) parkinsons')
data = query.callAPI(debugModeOff = True)
print(data)
"""